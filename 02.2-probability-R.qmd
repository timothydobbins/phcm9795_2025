### Producing a one-way frequency table

We have three categorical variables to summarise in Table 1: sex, stage and vital status. These variables are best summarised using one-way frequency tables, which can be constructed using the `descriptives` function from the `jmv` package, with the `freq = TRUE` option. Before constructing frequency tables however, we *must define the variables as categorical variables*, by converting them to *factors*.

#### Defining categorical variables as factors {#sec-cat-as-factors}

To define a categorical variable as such in R, we define it as a **factor** using the factor function:

`factor(variable=, levels=, labels=)`

We specify:

-   levels: the values the categorical variable can take
-   labels: the labels corresponding to each of the levels (entered in the same order as the levels)

To define our variable `sex` as a factor, we use:

```{r}
pbc <- readRDS("data/activities/mod01_pbc.rds")

pbc$sex <- factor(pbc$sex,
    levels = c(1, 2),
    labels = c("Male", "Female")
)
```

We can then produce a frequency table:

```{r}
descriptives(data = pbc, vars = sex, freq = TRUE)
```

> Task: define `stage` and `status` (Vital Status) as factors, and produce one-way frequency tables. Refer to the file `pbc_info.txt` to view the labels for each variable. For example, for Stage:

```{r}
pbc$stage <- factor(pbc$stage,
    levels = c(1, 2, 3, 4),
    labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4")
)
```

### Producing a two-way frequency table

To produce tables summarising two categorical variables, we can use the `contTables()` function within the `jmv` package. The minimal inputs to include are `data`: the name of the data frame to be analysed, `rows`: the variable representing the rows of the table, and `cols`: the name of the columns of the table.

For example, to produce a two-way table showing stage of disease by sex using the pbc data frame, we use:

```{r}
contTables(data = pbc, rows = sex, cols = stage)
```

[The bottom part of the output, χ² Tests, can be ignored for now]

You may notice in the above that the number of observations is now 412. This is because there are missing observations for either sex or stage: which is it, and how would you determine this?

From the cross-tabulation, you can see the individual frequencies of participants in each of the categories in each cell. For example, there are 3 male participants who have Stage 1 disease. You can also read the totals for each row and column. For example, there are 44 males, and 144 participants have Stage 4 disease.

You can also add percentages into your table using `pcCol=TRUE` to include column percents, and `pcRow=TRUE` for row percents. For example, to calculate the relative frequencies (i.e. percentages) of sex within each stage, we would request **column percents** with the option: `pcCol=TRUE`.

```{r}
contTables(data = pbc, rows = sex, cols = stage, pcCol = TRUE)
```

We can see that the 3 male participants with Stage 1 disease represent 14% of those with Stage 1 disease.

## Creating bar charts for one categorical variable

The simplest way to use the `plot()` function is by specifying an object to be plotted. To plot a single variable from a data frame, we must define it using: `dataframe$variable`.

Here we will create the bar chart shown in @fig-bar-1 of the statistics notes using the `mod01_pdc.rds` dataset. The x-axis of this graph will be the stage of disease, and the y-axis will show the number of participants in each category.

```{r}
plot(pbc$stage,
    main = "Bar graph of stage of disease from PBC study",
    ylab = "Number of participants"
)
```

Note that stage is a categorical variable, that has been defined as a factor (in @sec-cat-as-factors). You **must define categorical data as factors** to plot them in a bar graph.

## Creating bar charts for two categorical variables

Creating a **clustered bar chart** as shown in @fig-bar-2 can be done easily using the `contTables` function in the `jmv` package. First create a cross-tab from the variables to be plotted, for example, Stage by Sex:

```{r}
contTables(data = pbc, rows = sex, cols = stage)
```


Creating a **clustered bar chart** as shown in @fig-bar-2 can be done by requesting a bar chart (`barplot=TRUE`), and the x-axis should be constructed from `stage` - that is, the **column** variable:

```{r}
contTables(pbc,
    rows = sex, cols = stage,
    barplot = TRUE, xaxis = "xcols"
)
```

If you want the x-axis to be constructed from the row variable, you would use `xaxis = "xrows"`.

To create a **stacked bar chart** (as in @fig-bar-3), specify `bartype` to be `stack`:

```{r}
contTables(pbc,
    rows = sex, cols = stage,
    barplot = TRUE, xaxis = "xcols", bartype = "stack"
)
```

Finally, to create a **stacked relative bar chart** (as in @fig-bar-4), specify the y-axis to be a percent (`yaxis="ypc"`), and the percentage be calculated from the columns of the frequency table (`yaxisPc = "column_pc"`):

```{r}
contTables(pbc,
    rows = sex, cols = stage,
    barplot = TRUE, bartype = "stack", xaxis = "xcols",
    yaxis = "ypc", yaxisPc = "column_pc"
)
```


## Importing data into R

We have described previously how to import data that have been saved as R .rds files. It is quite common to have data saved in other file types, such as Microsoft Excel, or plain text files. In this section, we will demonstrate how to import data from other packages into R.

There are two useful packages for importing data into R: `haven` (for data that have been saved by jamovi, SAS or SPSS) and `readxl` (for data saved by Microsoft Excel). Additionally, the `labelled` package is useful in working with data that have been labelled in jamovi.

### Importing plain text data into R

A `csv` file, or a "comma separated variables" file is commonly used to store data. These files have a very simple structure: they are plain text files, where data are separated by commas. csv files have the advantage that, as they are plain text files, they can be opened by a large number of programs (such as Notepad in Windows, TextEdit in MacOS, Microsoft Excel - even Microsoft Word). While they can be opened by Microsoft Excel, they can be opened by many other programs: the csv file can be thought of as the lingua-franca of data.

In this demonstration, we will use data on the weight of 1000 people entered in a csv file called `mod02_weight_1000.csv` available on Moodle.

To confirm that the file is readable by any text editor, here are the first ten lines of the file, opened in Notepad on Microsoft Windows, and TextEdit on MacOS.

```{r , echo=FALSE, out.width = "66%",}
knitr::include_graphics("img/mod02/import-01.png")
```

We can use the `read.csv` function:

```{r}
sample <- read.csv("data/examples/mod02_weight_1000.csv")
```

Here, the `read.csv` function has the default that the first row of the dataset contains the variable names. If your data do not have column names, you can use `header=FALSE` in the function.

Note: there is an alternative function `read_csv` which is part of the `readr` package (a component of the `tidyverse`). Some would argue that the `read_csv` function is more appropriate to use because of an issue known as `strings.as.factors`. The `strings.as.factors` default was removed in R Version 4.0.0, so it is less important which of the two functions you use to import a `.csv` file. More information about this issue can be found [here](https://simplystatistics.org/posts/2015-07-24-stringsasfactors-an-unauthorized-biography) and [here](https://developer.r-project.org/Blog/public/2020/02/16/stringsasfactors/).

## Recoding data {#sec-recoding-data}

One task that is common in statistical computing is to recode variables. For example, we might want to group some categories of a categorical variable, or to present a continuous variable in a categorical way.

In this example, we can use the `pbc` data and recode age into age groups:

-   Less than 30
-   30 to less than 50
-   50 to less than 70
-   70 or older

The quickest way to recode a continuous variable into categories is to use the `cut` command which takes a continuous variable, and "cuts" it into groups based on the specified "cutpoints"

```{r}
pbc$agegroup <- cut(pbc$age,
    breaks = c(0, 30, 50, 70, 100)
)
```

Notice that some numbers need to be defined for the lowest (age=0) and highest (age=100) bounds: both a lower and upper limit must be defined for each group.

If we examine the new `agegroup` variable:

```{r}
summary(pbc$agegroup)
```

we see that each group has been labelled in the form of (a, b]. This notation is equivalent to: greater than a, and less than or equal to b. The `cut` function excludes the lower limit, but includes the upper limit. Our age groups have been defined to include the lower limit, and exclude the upper limit (for example, greater than or equal to 30 and less than 50).

We can specify this recoding using the `right=FALSE` option:

```{r}
pbc$agegroup <- cut(pbc$age,
    breaks = c(0, 30, 50, 70, 100),
    right = FALSE
)

summary(pbc$agegroup)
```

Finally, we can specify labels for the groups using the `labels` option:

```{r}
pbc$agegroup <- cut(pbc$age,
    breaks = c(0, 30, 50, 70, 100),
    right = FALSE,
    labels = c(
        "Less than 30", "30 to less than 50",
        "50 to less than 70", "70 or more"
    )
)

summary(pbc$agegroup)
```

## Computing binomial probabilities using R {#sec-binom-r}

There are two R functions that we can use to calculate probabilities based on the binomial distribution: `dbinom` and `pbinom`:

-   `dbinom(x, size, prob)` gives the probability of obtaining `x` successes from `size` trials when the probability of a success on one trial is `prob`;
-   `pbinom(q, size, prob)` gives the probability of obtaining `q` **or fewer** successes from `size` trials when the probability of a success on one trial is `prob`;
-   `pbinom(q, size, prob, lower.tail=FALSE)` gives the probability of obtaining **more than** `q`successes from `size` trials when the probability of a success on one trial is `prob`.

To do the computation for part (a) in Worked Example 2.1, we will use the `dbinom` function with:

-   *x* is the number of successes, here, the number of smokers (i.e. k=3);
-   *size* is the number of trials (i.e. n=6);
-   and *prob* is probability of drawing a smoker from the population, which is 19.8% (i.e. p=0.198).

Replace each of these with the appropriate number into the formula:

```{r}
dbinom(x = 3, size = 6, prob = 0.198)
```

To calculate the upper tail of probability in part (b), we use the `pbinom(lower.tail=FALSE)` function. Note that the `pbinom(lower.tail=FALSE)` function **does not include `q`**, so to obtain 4 or more successes, we need to enter `q=3`:

```{r}
pbinom(q = 3, size = 6, prob = 0.198, lower.tail = FALSE)
```

For the lower tail for part (c), we use the `pbinom` function:

```{r}
pbinom(q = 2, size = 6, prob = 0.198)
```

